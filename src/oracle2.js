const oracledb = require('oracledb');


async function run() {
	let connection;
	try {
		connection = await oracledb.getConnection({
			user: 'sys',
			password: 'P@assword123',
			connectString: 'oracle/XE',
			privilege: oracledb.SYSDBA
		});

		// Replace with your query
		const sqlArray = sql.split('--separator');
		for (let i = 0; i < sqlArray.length; i++) {
			 await connection.execute(sqlArray[i]);

		}

	} catch (err) {
		console.error(err);
	} finally {
		if (connection) {
			try {
				await connection.close();
			} catch (err) {
				console.error(err);
			}
		}
	}
}

const sql = `
-- Dropping Tables
-- Note: These will throw errors if tables don't exist
BEGIN
      EXECUTE IMMEDIATE 'DROP TABLE package';
  EXCEPTION
      WHEN OTHERS THEN NULL;
  END;
--separator
BEGIN
      EXECUTE IMMEDIATE 'DROP TABLE orderLine';
  EXCEPTION
      WHEN OTHERS THEN NULL;
  END;
--separator
BEGIN
      EXECUTE IMMEDIATE 'DROP TABLE deliveryAddress';
  EXCEPTION
      WHEN OTHERS THEN NULL;
  END;
--separator
BEGIN
      EXECUTE IMMEDIATE 'DROP TABLE torder';
  EXCEPTION
      WHEN OTHERS THEN NULL;
  END;
--separator
BEGIN
      EXECUTE IMMEDIATE 'DROP TABLE vendor';
  EXCEPTION
      WHEN OTHERS THEN NULL;
  END;
--separator
BEGIN
      EXECUTE IMMEDIATE 'DROP TABLE customer';
  EXCEPTION
      WHEN OTHERS THEN NULL;
  END;
--separator
BEGIN
      EXECUTE IMMEDIATE 'DROP TABLE datetest';
  EXCEPTION
      WHEN OTHERS THEN NULL;
  END;
--separator
-- Create the datetest table
CREATE TABLE datetest (
	id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tdate DATE,
    tdatetime DATE,
    tdatetime_tz DATE
)
--separator
-- Insert into datetest
INSERT INTO datetest (tdate, tdatetime, tdatetime_tz)
VALUES (TO_DATE('2023-07-14 12:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-07-14 12:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2023-07-14 12:00:00', 'YYYY-MM-DD HH24:MI:SS'))
--separator
-- Create the customer table
CREATE TABLE customer (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,   
    name VARCHAR2(100),
    balance NUMERIC,
    isActive NUMBER(1),
    data  NVARCHAR2(1500),
    picture BLOB -- VARBINARY(MAX) equivalent
)
--separator
-- Create the vendor table
CREATE TABLE vendor (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100),
    balance NUMERIC,
    isActive NUMBER(1)
)
--separator
-- Create the order table
CREATE TABLE torder (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    orderDate DATE,
    customerId INTEGER,
    FOREIGN KEY (customerId) REFERENCES customer(id)
)
--separator
-- Create the orderLine table
CREATE TABLE orderLine (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    orderId INTEGER,
    product VARCHAR2(100),
    FOREIGN KEY (orderId) REFERENCES torder(id)
)
--separator
-- Create the package table
CREATE TABLE package (
    packageId int GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    lineId INTEGER,
    sscc VARCHAR2(100),
    FOREIGN KEY (lineId) REFERENCES orderLine(id)
)
--separator
-- Create the deliveryAddress table
CREATE TABLE deliveryAddress (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    orderId INTEGER,
    name VARCHAR2(100), 
    street VARCHAR2(100),
    postalCode VARCHAR2(100),
    postalPlace VARCHAR2(100),
    countryCode VARCHAR2(100),
    FOREIGN KEY (orderId) REFERENCES torder(id)
)
`;

run();
